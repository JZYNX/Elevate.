const { default: mongoose } = require('mongoose')
const User = require('../models/userModel')
const Post = require('../models/postModel')



// get all
const getAllUsers = async (req, res) => {
    const users = await User.find({})

    return res.status(200).json(users)
}

// get one
const getOneUser = async (req, res) => {
    const {id} = req.params

    if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(404).json({error: "Invalid id, needs to be mongo ID"})
    }

    const user = await User.findById(id)

    if (!user) {
        return res.status(404).json({error: "No such user"})
    }

    return res.status(200).json(user)
}

// POST new user
const createUser = async (req, res) => {
    const {username, password, email} = req.body

    // check if password contains Sok
    const substring = "sok";
    const lowercasePassword = password.toLowerCase();
    const lowercaseSubstring = substring.toLowerCase();

    if (lowercasePassword.includes(lowercaseSubstring)) {
        return res.status(400).json({ message: "Password contains sok, it is too large!!!"})
    }

    try {
        const user = await User.create({username, password, email})
        res.status(200).json(user)
    } catch (err) {
        res.status(400).json({error: err.message})
    }
}

// UPDATE a user
// const updateUser = async (req, res) => {
//     const {id} = req.params

//     if (!mongoose.Types.ObjectId.isValid(id)) {
//         return res.status(404).json({error: "Invalid id, needs to be mongo ID"})
//     }

//     const user = await User.findOneAndUpdate({_id: id}, {
//         ...req.body
//     })

//     if (!user) {
//         return res.status(404).json({error: "No such user"})
//     }

//     return res.status(200).json(user)
// }


const postImage = async (req, res,next) => {
    try {
        // Check if a file was uploaded
        if (!req.file) {
            
            return res.status(400).json({ msg: "No image uploaded" });
        }
        // Assuming you want to save the file path to the database
        const { path } = req.file;
        const newImage = await Post.create({ imagePath: path });
        newImage.save();
        console.log("THE returning IAMGE omg " + path);
        return res.status(200).json({ msg: "New image uploaded...!", filePath: path });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal server error" });
    }
};

const updateUser = async (req, res) => {
    const { username, password } = req.body; // Assuming the username is sent in the request body
    const updatedUserData = req.body;

    try {
        // check is password is valid
        if (password && (password.length < global.PASSWORD_MIN_LENGTH || password.length > global.PASSWORD_MAX_LENGTH)) {
            return res.status(400).json({ message: "Password must be between 10 and 30 characters!"});
        }
        // check if profile pic was uploaded.
        if (req.file) {
            updatedUserData.userImage = req.file.path;
        }
        // Find the user based on the username
        const updatedUser = await User.findOneAndUpdate(
        { username }, // Query to find the user by username
        { $set: updatedUserData }, // Update the user's data with the provided data
        { new: true } // Return the updated user
      );


  
      if (!updatedUser) {
        return res.status(404).json({ error: 'User not found' });
      }
  
      return res.status(200).json(updatedUser);
    } catch (error) {
      console.error('Error updating user:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  };


const updateImage = async (req , res) => {
    if (!req.file) {
        return res.status(400).json({ message: 'No image uploaded' });
    }
    const imageUrl = req.file.path;
    res.status(200).json({ message: 'Image uploaded successfully', imageUrl });
    return;
}

const uploadEvent = async (req, res) => {
    try {
      // Assuming the frontend sends both the username and event data in the request body
      const { username, event } = req.body;
  
      // Find the user by username and update their events array
      const updatedUser = await User.findOneAndUpdate(
        { username: username },
        { $push: { events: event } }, // Add the event to the events array
        { new: true } // Return the updated user
      );
  
      if (!updatedUser) {
        return res.status(404).json({ error: 'User not found' });
      }
  
      // Respond with a success message or updated user data
      res.status(200).json(updatedUser);
    } catch (error) {
      console.error('Error uploading event:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

const updateEvents = async (req, res) => {
    try {
      // Assuming the frontend sends both the username and the complete events array
      const { username, event } = req.body;
      // Find the user by username and set their events array to the updatedEvents
      const updatedUser = await User.findOneAndUpdate(
        { username: username },
        { events: event }, // Set the events array to the new updatedEvents
        { new: true } // Return the updated user
      );
  
      if (!updatedUser) {
        return res.status(404).json({ error: 'User not found' });
      }
  
      // Respond with a success message or updated user data
      res.status(200).json(updatedUser);
    } catch (error) {
      console.error('Error uploading event:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
};

const deleteUsersExceptSkyrider = async (req, res) => {
    try {
      await User.deleteMany({ username: { $ne: 'Skyrider' } });
      res.status(200).json({message: `Deleted all users except Skyrider.`});
    } catch (error) {
      console.error('Error deleting users:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  };

module.exports = {
    createUser,
    getAllUsers,
    getOneUser,
    updateUser,
    postImage,
    updateImage,
    uploadEvent,
    updateEvents,
    deleteUsersExceptSkyrider
}